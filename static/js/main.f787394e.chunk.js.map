{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Business/Business.js","components/BusinessList/BusinessList.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","handleSortByChange","handleEnter","sortByOption","this","setState","e","target","value","searchYelp","preventDefault","key","Object","keys","map","sortByOptionValue","className","getSortByClass","onClick","renderSortByOptions","placeholder","onChange","onKeyPress","React","Component","Business","href","business","url","src","imageSrc","alt","name","coordinates","latitude","longitude","address","city","zipCode","category","rating","reviewCount","BusinessList","businesses","id","Yelp","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f787394e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\n class SearchBar extends React.Component {\r\n     constructor(props) {\r\n         super(props);\r\n\r\n         this.state = {\r\n             term: 'restaurant',\r\n             location: 'USA',\r\n             sortBy: 'best_match'\r\n         }\r\n\r\n         this.sortByOptions = {\r\n            'Best Match': 'best_match',\r\n            'Highest Rated': 'rating',\r\n            'Most Reviewed': 'review_count'\r\n         }\r\n        \r\n         this.handleTermChange = this.handleTermChange.bind(this);\r\n         this.handleLocationChange = this.handleLocationChange.bind(this);\r\n         this.handleSearch = this.handleSearch.bind(this);\r\n         this.handleSortByChange = this.handleSortByChange.bind(this);\r\n         this.handleEnter = this.handleEnter.bind(this);\r\n     }\r\n\r\n     getSortByClass(sortByOption) { \r\n         return this.state.sortBy === sortByOption ? 'active' : '';\r\n     }\r\n\r\n     handleSortByChange(sortByOption) {\r\n        this.setState({sortBy: sortByOption});\r\n     }\r\n\r\n     handleTermChange(e) {\r\n        this.setState({term: e.target.value});\r\n     }\r\n\r\n     handleLocationChange(e) {\r\n        this.setState({location: e.target.value});\r\n     }\r\n\r\n     handleSearch(e) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        e.preventDefault();\r\n     }\r\n\r\n     handleEnter(e) {\r\n        e.key === 'Enter' && this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n      }\r\n\r\n     renderSortByOptions() {\r\n         return Object.keys(this.sortByOptions).map(sortByOption => {\r\n             let sortByOptionValue = this.sortByOptions[sortByOption];\r\n             return(\r\n                 <li \r\n                 key={sortByOptionValue} \r\n                 className={this.getSortByClass(sortByOptionValue)}\r\n                 onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>\r\n             );\r\n         });\r\n     }\r\n\r\n     render() {\r\n         return(\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input \r\n                    placeholder=\"Search Businesses (restaurants by default)\" \r\n                    onChange={this.handleTermChange} \r\n                    onKeyPress={this.handleEnter} />\r\n                    \r\n                    <input \r\n                    placeholder=\"Where? (USA by default)\" \r\n                    onChange={this.handleLocationChange} \r\n                    onKeyPress={this.handleEnter} />\r\n                </div>\r\n                <div onClick={this.handleSearch} className=\"SearchBar-submit\">\r\n                    <a>Let's Go</a>\r\n                </div>\r\n          </div>\r\n         );\r\n     }\r\n }\r\n\r\n export default SearchBar;","import React from \"react\";\r\nimport \"./Business.css\";\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <a href={this.props.business.url} target='_blank'>\r\n                        <img src={this.props.business.imageSrc} alt=''/>\r\n                    </a>\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <a \r\n                    href={`https://www.google.com/maps/?q=${this.props.business.coordinates.latitude},${this.props.business.coordinates.longitude}`} \r\n                    target='_blank'>\r\n                        <div className=\"Business-address\">\r\n                            <p>{this.props.business.address}</p>\r\n                            <p>{this.props.business.city}</p>\r\n                            <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n                        </div>\r\n                    </a>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category}</h3>\r\n                        <h3 className=\"rating\">{this.props.business.rating}</h3>\r\n                        <p>{this.props.business.reviewCount}</p>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Business","import React from \"react\";\r\nimport \"./BusinessList.css\";\r\nimport Business from \"../Business/Business.js\";\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"BusinessList\">\r\n                {\r\n                this.props.businesses.map(\r\n                    business => <Business business={business} key={business.id} />\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BusinessList;","const apiKey = 'gqII128WSYCIYxmYw59mcEftRByKUsmac1WfRwUikX_gh22Gdix7k-u00HbDJ5ce4hFjDb1FaAC_c8zFS9vQz_RYM1zy9QvWPjSHmNh-b2z_Kyh_8F_akzQBPYcTXnYx';\r\n\r\nconst Yelp = {\r\n    searchYelp(term, location, sortBy) {\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${apiKey}`,\r\n            },\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((jsonResponse) => {\r\n            if (jsonResponse.businesses) {\r\n                return jsonResponse.businesses.map(((business) => {\r\n                    return {\r\n                        id: business.id,\r\n                        imageSrc: business.image_url,\r\n                        name: business.name,\r\n                        address: business.location.address1,\r\n                        city: business.location.city,\r\n                        state: business.location.state,\r\n                        zipCode: business.location.zip_code,\r\n                        category: business.categories[0].title,\r\n                        rating: business.rating,\r\n                        reviewCount: business.review_count,\r\n                        url: business.url,\r\n                        coordinates: business.coordinates\r\n                    };\r\n                }));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default Yelp;\r\n ","import React from 'react';\nimport './App.css';\nimport SearchBar from \"../SearchBar/SearchBar.js\";\nimport BusinessList from \"../BusinessList/BusinessList.js\";\nimport Yelp from '../../util/Yelp.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    }\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.searchYelp(term, location, sortBy)\n    .then(businesses => this.setState({businesses: businesses}))\n  }\n\n  render(){\n    return (\n    <div className=\"App\">\n      <h1>ravenous</h1>\n      <SearchBar searchYelp={this.searchYelp} />\n      <BusinessList businesses={this.state.businesses} /> \n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}